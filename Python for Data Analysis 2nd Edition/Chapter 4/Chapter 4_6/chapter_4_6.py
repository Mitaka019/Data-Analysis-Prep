
# 4.6 Pseudorandom Number Generation

import numpy as np

samples = np.random.normal(size = (4, 4))

print(samples)

from random import normalvariate

N = 1000000

import timeit

# Timing normalvariate
time_normalvariate = timeit.timeit(
	stmt="samples = [normalvariate(0, 1) for _ in range(N)]",
	setup="from random import normalvariate; N=1000000",
	number=1
)
print(f"Time for normalvariate: {time_normalvariate:.4f} seconds")

# Timing numpy random normal
time_numpy = timeit.timeit(
	stmt="np.random.normal(size=N)",
	setup="import numpy as np; N=1000000",
	number=1
)
print(f"Time for np.random.normal: {time_numpy:.4f} seconds")

# We say that these are pseudorandom numbers because they are generated by an algorithm with deterministic behavior based on the seed of the random number generator. 

print(np.random.seed(1234))

# The data generation functions in numpy.random use a global random seed.

rng = np.random.RandomState(1234)
print(rng.randn(10))

# NumPy Random Functions

# seed       - Seed the random number generator
# permutation- Return a random permutation of a sequence or permuted range
# shuffle    - Randomly permute a sequence in-place
# rand       - Draw samples from a uniform distribution
# randint    - Draw random integers from a given low-to-high range
# randn      - Draw samples from a normal distribution (mean = 0, std = 1)
# binomial   - Draw samples from a binomial distribution
# normal     - Draw samples from a normal (Gaussian) distribution
# beta       - Draw samples from a beta distribution
# chisquare  - Draw samples from a chi-square distribution
# gamma      - Draw samples from a gamma distribution
# uniform    - Draw samples from a uniform [0, 1) distribution

